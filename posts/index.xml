<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on AWS For Humans</title><link>https://laur1s.github.io/posts/</link><description>Recent content in Posts on AWS For Humans</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 03 Nov 2021 00:14:03 +0200</lastBuildDate><atom:link href="https://laur1s.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Cloudfront: Adding HTTP security headers with Response Headers Policies</title><link>https://laur1s.github.io/posts/cloudfront-response-headers-policies/</link><pubDate>Wed, 03 Nov 2021 00:14:03 +0200</pubDate><guid>https://laur1s.github.io/posts/cloudfront-response-headers-policies/</guid><description>Another day, another blog post about adding security headers to Cloudfront HTTP responses. Actually, it&amp;rsquo;s my third post about this topic, which is the same as the number of AWS services that can be used to modify Cloudfront headers. As of today we have: Lambda@Edge, Cloudfront Functions, and the newly introduced Response Headers Policies
Again, ability to easily add HTTP headers to Cloudfront was very commonly requested feature: https://t.co/BGzCyi8LtU headers without needing to use lambda@edge would be great</description></item><item><title>Limit Access to AWS Regions With IAM and SCP</title><link>https://laur1s.github.io/posts/limit-access-to-aws-regions-with-iam/</link><pubDate>Tue, 02 Nov 2021 15:48:39 +0200</pubDate><guid>https://laur1s.github.io/posts/limit-access-to-aws-regions-with-iam/</guid><description>By default AWS gives you access to all AWS regions. However, it&amp;rsquo;s a very rare case that you might need to launch resources across all AWS regions in one account. In fact, I think is usually best to have one account per AWS region when possible. As some of the services are global (like IAM roles) by using one account per AWS region you can be sure that naming of IAM roles doesn&amp;rsquo;t clash and you won&amp;rsquo;t accidentally use an IAM role written for us-west-1 for your application in us-east-1 for example.</description></item><item><title>RDS Multi AZ vs Read Replica</title><link>https://laur1s.github.io/posts/rds-multi-az-vs-read-replica/</link><pubDate>Mon, 01 Nov 2021 14:53:45 +0200</pubDate><guid>https://laur1s.github.io/posts/rds-multi-az-vs-read-replica/</guid><description>Hi, in this post I&amp;rsquo;m going to go back to a fundamental AWS service - RDS. Specifically, I&amp;rsquo;ll focus on two ways to ensure resilience of your RDS database: RDS Multi AZ and RDS Read replica.
Looking into AWS RDS console, it looks like a very simple service: you can choose which database engine you want to use, pick some additional parameters, and launch the database. However behind the single interface lies a complexity: each database engine type has slightly different concepts and functionality that you have to be aware of.</description></item><item><title>Replace Lambda@Edge With Cloudfront Functions</title><link>https://laur1s.github.io/posts/replace-lambda-at-ege-with-cloudfront-functions/</link><pubDate>Thu, 09 Sep 2021 16:53:11 +0300</pubDate><guid>https://laur1s.github.io/posts/replace-lambda-at-ege-with-cloudfront-functions/</guid><description>In my previous post I discussed about newly released Cloudfront functionality - Cloudfront Functions and Compared them to Lambda@Edge.
In this post I will show how to migrate Cloudfront distribution that uses Lambda@Edge to set custom security headers to Cloudfront Functions using Terraform. I&amp;rsquo;ve discussed differences of these two AWS functions previously so I&amp;rsquo;m not going go into that and I&amp;rsquo;ll jump straight to the code.
Replacing Lambda@Edge with Cloudfront Functions using Terraform Replacing Lambda@Edge with Cloudfront Functions using Terraform is quite straightforward.</description></item><item><title>Upgrading Terraform from 0.12 to 0.15</title><link>https://laur1s.github.io/posts/terraform-0.12-upgrade/</link><pubDate>Wed, 02 Jun 2021 12:28:46 +0300</pubDate><guid>https://laur1s.github.io/posts/terraform-0.12-upgrade/</guid><description>If you follow Terraform best practices your Terraform infrastructure code should consist of multiple small modules that contain certain infrastructure code (in this case AWS). However, the problem with smaller modules is that probably most of the infrastructure doesn&amp;rsquo;t change that often. E.g.: once you create a VPC you don&amp;rsquo;t need to update it very often unless there are some changes with networking. On the other hand, other Terraform modules you use like ECS clusters, or ASG groups might require to be updated more often.</description></item><item><title>Modifying AWS Cloudfront response headers with Cloudfront functions</title><link>https://laur1s.github.io/posts/cloudfront-functions/</link><pubDate>Sun, 23 May 2021 21:51:56 +0300</pubDate><guid>https://laur1s.github.io/posts/cloudfront-functions/</guid><description>Adding custom HTTP response headers to cloudfront is quite a common task. E.g.: Your website might need a Content-Security-Policy header.
Doing this task in Cloudfront was not easy. You needed to setup a Lambda@Edge function that intercepts response requests and adds the required headers. It's not that difficult to setup Lambda@Edge but using Lambda functions to add a simple HTTP header to a response feels like a bit of overkill. I even wrote about this when the Cloudfront team asked for suggestions: https://t.</description></item><item><title>Introduction to .dockerignore</title><link>https://laur1s.github.io/posts/introduction-to-dockerignore/</link><pubDate>Tue, 20 Apr 2021 09:45:17 +0300</pubDate><guid>https://laur1s.github.io/posts/introduction-to-dockerignore/</guid><description>.dockerignore is a special file where you can specify files and folders that will be excluded from the docker context. What it means is that these files won't be added to your container image after using ADD or COPY commands. For more information about the .dockerignore please refer to the docker documentation.
For example for Node.js application my .dockerignore file might look something like this:
# .dockerignore# ignore git.git/.gitignore# ignore teststest/# local node modules and debug lognode_modules/npm-debug.</description></item><item><title>First Post: why starting a technical blog is hard</title><link>https://laur1s.github.io/posts/first-post/</link><pubDate>Mon, 19 Apr 2021 14:39:38 +0300</pubDate><guid>https://laur1s.github.io/posts/first-post/</guid><description>As a devops engineer I work with various tools and technologies everyday. Some of them I use everyday or almost everyday (AWS, Terraform, Git , Docker, etc. ) and some only rarely. If you need to use use something you only used a month or two ago chances are you will have to spend some time getting familiar with the tool again. This is where notes come very useful. If you have some notes about what you figured out when using the tool last time it would be much easier to figure out and remember what you did last time.</description></item></channel></rss>